"use strict";(self.webpackChunkjackmleitch_com_np=self.webpackChunkjackmleitch_com_np||[]).push([[7306],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3580:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={slug:"Recipe-Recommendation1",title:"Using BeautifulSoup to Help Make Beautiful Soups",tags:["Python","Web Scraping"],authors:"jack"},l=void 0,p={permalink:"/blog/Recipe-Recommendation1",source:"@site/blog/2020-10-15-Recipe1.md",title:"Using BeautifulSoup to Help Make Beautiful Soups",description:"The journey to my first \u2018full-stack\u2019 data science project \u2014 a practical guide to web scraping",date:"2020-10-15T00:00:00.000Z",formattedDate:"October 15, 2020",tags:[{label:"Python",permalink:"/blog/tags/python"},{label:"Web Scraping",permalink:"/blog/tags/web-scraping"}],readingTime:9.795,truncated:!0,authors:[{name:"Jack Leitch",title:"Machine Learning Engineer",url:"https://github.com/jackmleitch",imageURL:"https://github.com/jackmleitch.png",key:"jack"}],frontMatter:{slug:"Recipe-Recommendation1",title:"Using BeautifulSoup to Help Make Beautiful Soups",tags:["Python","Web Scraping"],authors:"jack"},prevItem:{title:"The ins and outs of Gradient Descent",permalink:"/blog/Gradient-Descent"}},c={authorsImageUrls:[void 0]},u=[{value:"Let&#39;s get some data!",id:"lets-get-some-data",level:2},{value:"Set up",id:"set-up",level:2},{value:"Step 1",id:"step-1",level:2},{value:"Step 2",id:"step-2",level:2},{value:"All together now",id:"all-together-now",level:2},{value:"Summary",id:"summary",level:2}],d={toc:u};function h(e){var t=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The journey to my first \u2018full-stack\u2019 data science project \u2014 a practical guide to web scraping")),(0,r.kt)("p",null,"I\u2019ve had my fun playing around with all the \u2018classic\u2019 ML datasets (the likes of MNIST, Titanic, Iris, etc.) and I decided it's time to start something of my own. The main reason being that I simply want something different. It all felt somewhat artificial, I want something new and challenging. Something that is not served to me on a silver platter."),(0,r.kt)("p",null,"I spend a good while mulling over possible projects and came up with a few possible avenues, one of which I will go over in this post. To help get more out of the experience, I thought I would blog my journey."),(0,r.kt)("p",null,"As a student, I often fall into the trap of cooking the same recipes over and over again. On one hand, it\u2019s pretty great, I know what I am eating and I know that what I am putting in my meals works for me. But oh boy is it boring (as I'm writing this I'm tucking into my 3rd portion of bolognese in four days\u2026)."),(0,r.kt)("p",null,"So\u2026 the idea: Given a list of ingredients, what are different recipes I can make? That is, what recipes can I make with the food I have in my apartment?"),(0,r.kt)("p",null,"I hope to build a recommendation system in which the ingredients available by the user is taken as input, and the appropriate dishes or recipes are recommended to the user by Machine Learning (most likely) using the K-Nearest Neighbors algorithm. I hope to then use Flask to deploy the model so that the output can be visualized in a convenient and user-friendly way."),(0,r.kt)("p",null,"This project idea appeals to me in a few ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"I can find and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Web_scraping"},"scrape")," the data myself")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Hopefully, by the end of it, I will have a product that I\u2019ll actually use")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It\u2019s open-ended, e.g. can I take a picture of the ingredients in my fridge as opposed to inputting ingredients manually?"))),(0,r.kt)("p",null,"I have had a lot of practice in the machine learning aspect of data science but that isn't all there is. I want to practice using a diverse set of tools to solve a wide range of problems, and web scraping is definitely something I need to brush up on. So, this blog is dedicated to just that."),(0,r.kt)("p",null,"First things first, I need a data source. I frequently use Jamie Oliver\u2019s ",(0,r.kt)("a",{parentName:"p",href:"https://www.jamieoliver.com/"},"cooking website")," and I really enjoy a lot of the recipes on there so this was a fairly obvious source of data for me. The other benefits are that is popular to the general public and it well maintained/monitored."),(0,r.kt)("p",null,"The complete code for scraping the recipe data from Jamie Oliver\u2019s website can be found on my ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jackmleitch/Whatscooking-"},"GitHub"),". Side note: I prefer to not use Jupyter Notebooks for anything other than ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Exploratory_data_analysis"},"EDA"),". Maybe I will do another blog post about this in the future but in the meantime, some food for thought on the topic can be found ",(0,r.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/the-case-against-the-jupyter-notebook-d4da17e97243"},"here"),"."),(0,r.kt)("h2",{id:"lets-get-some-data"},"Let's get some data!"),(0,r.kt)("p",null,"So what libraries do we need? The most common for web scraping include ",(0,r.kt)("inlineCode",{parentName:"p"},"requests"),", Beautiful Soup (",(0,r.kt)("inlineCode",{parentName:"p"},"bs4"),"), and ",(0,r.kt)("inlineCode",{parentName:"p"},"Selenium"),". In this case, we will be using requests and Beautiful Soup. Although Selenium is very adequate, it\u2019s just not needed in this here. We are pulling content from static HTML pages and you would use Selenium when crawling content that is added to the page via JavaScript. Using Selenium here is just going to slow us down."),(0,r.kt)("p",null,"Before we get going we should do a little bit of exploring."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"alt",src:n(3586).Z,width:"2342",height:"1432"}),"\n",(0,r.kt)("img",{alt:"alt",src:n(4799).Z,width:"2546",height:"1426"})),(0,r.kt)("p",null,"The \u2018",(0,r.kt)("a",{parentName:"p",href:"https://www.jamieoliver.com/recipes/category/course/mains/"},"main recipes"),"\u2019 section of the website contains 858 different recipes, perfect -we now know where to look. We can break this task up into two steps."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Step 1: obtain URLs to each recipe page")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Step 2: Within each of these URLs, find recipe attributes: recipe name, ingredients, serving size, cooking time, and difficulty."))),(0,r.kt)("h2",{id:"set-up"},"Set up"),(0,r.kt)("p",null,"We want to import requests, BeautifulSoup, pandas and time (I will get to time later."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"import pandas as pd\nfrom bs4 import BeautifulSoup\nimport requests\nimport time\n")),(0,r.kt)("p",null,"We then want to specify the URL we want to scrape. It is worth noting that all the recipe links are on the same webpage, so we solely want to scrape URL links from ",(0,r.kt)("a",{parentName:"p",href:"https://www.jamieoliver.com/recipes/category/course/mains/"},"https://www.jamieoliver.com/recipes/category/course/mains/"),". That is, we don't need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"/page1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/page2")," etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Define the url in python\nurl = \u201chttps://www.jamieoliver.com/recipes/category/course/mains/"\n')),(0,r.kt)("h2",{id:"step-1"},"Step 1"),(0,r.kt)("p",null,"Now we use requests to retrieve content from the URL and BeautifulSoup to extract the required information from our requested content. Our target website is written in HTML so we need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"html.parser"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Fetching html from the website\npage = requests.get(url)\n# BeautifulSoup enables to find the elements/tags in a webpage\nsoup = BeautifulSoup(page.text, \u201chtml.parser\u201d)\n")),(0,r.kt)("p",null,"So, what are we working with? Let's print the soup variable\u2026"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'print(soup)\n...\n<div class=\u201drecipe-block\u201d>\n<a href=\u201d/recipes/fish-recipes/chargrilled-tuna-with-oregano-oil-and-beautifully-dressed-peas-and-broad-beans/\u201d id=\u201dgtm_recipe_subcat_816">\n<div class=\u201drecipe-image\u201d>\n<img alt=\u201dChargrilled tuna with oregano oil and beautifully dressed peas and broad beans\u201d data-src=\u201d//img.jamieoliver.com/jamieoliver/recipe-database/oldImages/large/117_1_1436538108.jpg?tr=w-330"\n...\n')),(0,r.kt)("p",null,"Well, that's certainly intimidating. Our data is in there somewhere though (as shown in bold), we just need to extract it. We want to find all of the href\u2019s in our \u2018soup\u2019 so fairly intuitively we can just use BeautifulSoups ",(0,r.kt)("inlineCode",{parentName:"p"},"find_all")," method. How convenient. The only information we want to extract from here are the ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," elements (the ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," tag is used to define hyperlinks, a complete list of HTML tags can be found ",(0,r.kt)("a",{parentName:"p",href:"https://eastmanreference.com/complete-list-of-html-tags"},"here"),"). We then want to make use of the get method to extract the href from inside each ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," tag. We can print the first 5 URLs by running the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"links = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\nprint(links[100:105])\n...\n['/recipes/pasta-recipes/beautiful-courgette-penne-carbonara/', '/recipes/vegetable-recipes/roasted-black-bean-burgers/', '/recipes/chicken-recipes/chicken-tofu-noodle-soup/', '/recipes/chicken-recipes/chicken-katsu-curry/',\n'/recipes/salmon-recipes/roasted-salmon-artichokes/']\n")),(0,r.kt)("p",null,"Perfect, that worked great. Well\u2026 kinda, there is a reason I chose to print from 100 to 105. There are a lot of elements in this list that aren\u2019t URLs for recipes, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"/videos/")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"/recipes/category/course/healthy-snack-ideas/"),". However, we can make use of the Pandas ",(0,r.kt)("inlineCode",{parentName:"p"},"series.str.contains")," to see if a pattern or regex is contained within a string of the Series."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Filtering the urls to only ones containing recipes\nimport pandas as pd\nrecipe_urls = pd.Series([a.get("href") for a in soup.find_all("a")])\nrecipe_urls = recipe_urls[(recipe_urls.str.count(\u201c-\u201d)>0) &                    (recipe_urls.str.contains(\u201c/recipes/\u201d)==True) &        (recipe_urls.str.contains(\u201c-recipes/\u201d)==True) & (recipe_urls.str.contains(\u201ccourse\u201d)==False) & (recipe_urls.str.contains(\u201cbooks\u201d)==False) & (recipe_urls.str.endswith(\u201crecipes/\u201d)==False)].unique()\n')),(0,r.kt)("p",null,"This piece of code makes convenient use of list comprehensions, then we filter the URLs a little bit e.g. all of the recipes contain at least 1 \u2018-\u2019 so we only take hrefs with ",(0,r.kt)("inlineCode",{parentName:"p"},"count(\u201c-\u201d)>0"),"."),(0,r.kt)("p",null,"The hrefs we have obtained are only the trail end of each URL so we finally just need to add in the start of the full URL to all these items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'df[\u2018recipe_urls\u2019] = \u201chttps://www.jamieoliver.com" + df[\u2018recipe_urls\u2019].astype(\u2018str\u2019)\n')),(0,r.kt)("h2",{id:"step-2"},"Step 2"),(0,r.kt)("p",null,"We now have 858 URLs to the different recipe pages, so let's just pick one and figure what data we want to collect from each page. From there we then generalize and automate the process. I\u2019m a big pasta guy so let's look at some ",(0,r.kt)("a",{parentName:"p",href:"https://www.jamieoliver.com/recipes/pasta-recipes/beautiful-courgette-penne-carbonara/"},"Beautiful courgette carbonara"),". I want to extract the recipe title, ingredients, number of people it serves, cooking time, and difficulty. I\u2019m conscious of repeating myself so I will just walk through getting the recipe title and ingredients (the most faffy one). As per usual, the inspecting element tool is our friend. If we inspect the title on the page we find the HTML:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<h1 class=\u201dhidden-xs\u201d>Beautiful courgette carbonara</h1>")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<h1>")," tags are used to define HTML headings. Therefore, to get the main webpage title we can just do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"url = 'https://www.jamieoliver.com/recipes/pasta-recipes/beautiful-courgette-penne-carbonara/'\nsoup = BeautifulSoup(requests.get(url).content, 'html.parser')\nprint(soup.find(\u2018h1\u2019).text.strip())\n# Beautiful courgette carbonara\n")),(0,r.kt)("p",null,"The find method allows us to just obtain the first ",(0,r.kt)("inlineCode",{parentName:"p"},"<h1>")," tag rather than all of them (",(0,r.kt)("inlineCode",{parentName:"p"},"find_all"),"). I then used ",(0,r.kt)("inlineCode",{parentName:"p"},".strip()")," to remove all the leading and trailing spaces from the string."),(0,r.kt)("p",null,"Right, so what do we need to make our pasta? By inspecting we find the ingredients are in list tags ",(0,r.kt)("inlineCode",{parentName:"p"},"<li>"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<ul class="\u201dingred-list" \u201c>\n  <li>6 medium green and yellow courgettes</li>\n  <li>500 g penne</li>\n  <li>4 large free-range eggs</li>\n  <li>100 ml single cream</li>\n  ...\n</ul>\n')),(0,r.kt)("p",null,"We can loop over all the elements in the list and append them to an ingredients list. There is a lot of empty space in each list element so we can split up each ingredient into single words (using ",(0,r.kt)("inlineCode",{parentName:"p"},".split()"),") and then join the string back up again (using ",(0,r.kt)("inlineCode",{parentName:"p"},"' '.join()"),"). A simple but elegant solution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"ingredients = []\nfor li in soup.select(\u2018.ingred-list li\u2019):\n    ingred = \u2018 \u2018.join(li.text.split())\n    ingredients.append(ingred)\nprint(ingredients)\n# ['6 medium green and yellow courgettes', '500 g penne', '4 large free-range eggs', '100 ml single cream', '1 small handful of Parmesan cheese', 'olive oil', '6 slices of higher-welfare back bacon', '\xbd a bunch of fresh thyme , (15g)', 'a few courgette flowers , (optional)']\n")),(0,r.kt)("p",null,"Excellent. I then created a class that I could call on to extract all the information from each URL. I mentioned earlier that there might be URLs that are not recipes so we can use a ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," ",(0,r.kt)("inlineCode",{parentName:"p"},"except")," condition in case the information is not found (e.g. the ",(0,r.kt)("a",{parentName:"p",href:"https://www.jamieoliver.com/videos/"},"videos")," page does not contain an ingredient list). I just added in Na values here, which will make it very easy to remove these URLs later. Again, the full scripts can be found on my ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jackmleitch/Whatscooking-"},"Github"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/src/web_scrape_jamie_oliver.py"',title:'"/src/web_scrape_jamie_oliver.py"'},"import numpy as np\nclass JamieOliver():\n  def __init__(self, url):\n     self.url = url\n     self.soup = BeautifulSoup(requests.get(url,    headers=headers).content, 'html.parser')\n  def ingredients(self):\n\u201c\u201d\u201d Creating a list containing the ingredients of the recipe \u201c\u201d\u201d\n      try:\n         ingredients = []\n         for li in self.soup.select(\u2018.ingred-list li\u2019):\n             ingred = \u2018 \u2018.join(li.text.split())\n             ingredients.append(ingred)\n         return ingredients\n      except:\n         return np.nan\n...\n")),(0,r.kt)("h2",{id:"all-together-now"},"All together now"),(0,r.kt)("p",null,"All that's left for us to do now is to loop over each URL in our data frame (",(0,r.kt)("inlineCode",{parentName:"p"},"recipe_df"),"). A word of caution though: we don't want to overload the website by making a tonne of requests in a short period of time (we also don't want to get blocked\u2026), this is where the ",(0,r.kt)("inlineCode",{parentName:"p"},"time.sleep")," method comes in. It simply suspends a program for a given number of seconds. Using NumPy's ",(0,r.kt)("inlineCode",{parentName:"p"},"random.randint()")," method we can pause our program by a random number of seconds, ",(0,r.kt)("inlineCode",{parentName:"p"},"random.randint(5,10,1)")," pauses it anytime between 5 and 10 seconds for example."),(0,r.kt)("p",null,"If you want you can also identify yourself to the website by using a header in the following way."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"headers = {'user-agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5); Jack Leitch'}\npage = requests.get(url, headers=headers)\n")),(0,r.kt)("p",null,"The following code finishes off the scrape and writes the data frame created to a CSV file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/src/scrape_data.py"',title:'"/src/scrape_data.py"'},'attribs = [\u2018recipe_name\u2019, \u2018serves\u2019, \u2018cooking_time\u2019, \u2018difficulty\u2019, \u2018ingredients\u2019]\n# For each url (i) we add the attribute data to the i-th row\nJamieOliver_df = pd.DataFrame(columns=attribs)\nfor i in range(0,len(recipe_df[\u2018recipe_urls\u2019])):\n    url = recipe_df[\u2018recipe_urls\u2019][i]\n    recipe_scraper = JamieOliver(url)\n    temp.loc[i] = [getattr(recipe_scraper, attrib)() for attrib in attribs]\n    if i % 25 == 0:\n       print(f\u2019Step {i} completed\u2019)\n    time.sleep(np.random.randint(1,5,1))\n# Put all the data into the same dataframe\nJamieOliver_df[\u2018recipe_urls\u2019] = recipe_df[\u2018recipe_urls\u2019]\n# Re-organise columns\ncolumns = [\u2018recipe_urls\u2019] + attribs\nJamieOliver_df = JamieOliver_df[columns]\n# Save dataframe to a csv file\nJamieOliver_df.to_csv(r"/Users/Jack/Documents/ML/Projects/Whatscooking/input/JamieOliver_full.csv", index=False)\n')),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"We started by connecting to the webpage, we then parsed the HTML using BeautifulSoup, then for each recipe webpage we looped through the soup object to extract the relevant information."),(0,r.kt)("p",null,"This is my first ever blog post so any feedback would be much appreciated and please give this a clap or comment if you enjoyed it/found it useful."),(0,r.kt)("p",null,"I hope to continue with these blogs as I progress further with my first end to end data science project. In the next post, I will be preprocessing my data (using nltk) and doing some data visualization. Thanks for reading!"))}h.isMDXComponent=!0},3586:function(e,t,n){t.Z=n.p+"assets/images/jmo1-f439d62a20c590445f4602d04ce41bd4.png"},4799:function(e,t,n){t.Z=n.p+"assets/images/jmo2-f74efdbb34616094e83ce49ae40881e0.png"}}]);