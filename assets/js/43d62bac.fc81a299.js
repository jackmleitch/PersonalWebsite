"use strict";(self.webpackChunkjackmleitch_com_np=self.webpackChunkjackmleitch_com_np||[]).push([[7668],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=a.createContext({}),c=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},d=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,l=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),m=c(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return n?a.createElement(h,r(r({ref:e},d),{},{components:n})):a.createElement(h,r({ref:e},d))}));function u(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6582:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],s={slug:"Strava-AP",title:"Automating Mundane Web-Based Tasks With Selenium and Heroku",tags:["Python","Automation","Web Scraping"],authors:"jack"},l=void 0,c={permalink:"/blog/Strava-AP",source:"@site/blog/2021-07-18-Strava2AP.md",title:"Automating Mundane Web-Based Tasks With Selenium and Heroku",description:"Automating away those unceasing repetitive tasks the easy way",date:"2021-07-18T00:00:00.000Z",formattedDate:"July 18, 2021",tags:[{label:"Python",permalink:"/blog/tags/python"},{label:"Automation",permalink:"/blog/tags/automation"},{label:"Web Scraping",permalink:"/blog/tags/web-scraping"}],readingTime:7.375,truncated:!0,authors:[{name:"Jack Leitch",title:"Machine Learning Engineer",url:"https://github.com/jackmleitch",imageURL:"https://github.com/jackmleitch.png",key:"jack"}],frontMatter:{slug:"Strava-AP",title:"Automating Mundane Web-Based Tasks With Selenium and Heroku",tags:["Python","Automation","Web Scraping"],authors:"jack"},prevItem:{title:"Building a Recipe Recommendation System",permalink:"/blog/Recipe-Recommendation"},nextItem:{title:"Automating the Setup of my Data Science Projects",permalink:"/blog/Project-Auto"}},d={authorsImageUrls:[void 0]},p=[{value:"The Task At Hand",id:"the-task-at-hand",level:2},{value:"The Game Plan",id:"the-game-plan",level:2},{value:"Making The Automatic Fully Automatic",id:"making-the-automatic-fully-automatic",level:2}],m={toc:p};function u(t){var e=t.components,s=(0,i.Z)(t,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,s,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Automating away those unceasing repetitive tasks the easy way")),(0,o.kt)("h2",{id:"the-task-at-hand"},"The Task At Hand"),(0,o.kt)("p",null,"Being the avid runner and data lover that I am, naturally, I like to get the best out of logging my training. The solution I settled with a few years back was to log my training on both Strava, and Attackpoint. While both platforms provide a service for tracking exercise using GPS data, Strava has an emphasis on being a social network and it allows you to look into each activity in an in-depth way, something that Attackpoint lacks; Attackpoint on the other hand is more barebone and I personally prefer it for looking at my training as a whole (in timescales of weeks/months/years)."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("img",{alt:"alt",src:n(9621).Z,width:"1302",height:"1028"})),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("img",{alt:"alt",src:n(8301).Z,width:"1266",height:"1106"}))))),(0,o.kt)("p",null,"The one problem I have, however, is that I always struggle to keep both of these logs up to date. Garmin (the maker of my running watch) syncs up with both websites, via an API, so my runs magically appear on both websites, so the problem isn't that my runs are only appearing on one website. The problem I have is that keeping both websites up to date with run notes/descriptions is a tedious affair. I tend to always keep Strava up to date and dip in and out of posting on Attackpoint whenever I can be bothered. So why not just automate away my commitment issues to these websites?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The task: every time I run and write about it on Strava, take that description and add it to the corresponding run post on Attackpoint.")),(0,o.kt)("h2",{id:"the-game-plan"},"The Game Plan"),(0,o.kt)("p",null,"So I had a why, all that was left was to figure out how. Choosing to go from Strava to Attackpoint, and not the other way around, was an easy one. Firstly, Strava is way nicer to use, and secondly, the website is more modern, slick, and fancy so writing code to post and interact with it, although doable, would be more of a challenge. So how did I actually do this?"),(0,o.kt)("p",null,"Enter Selenium. Selenium is a Python package that launches and controls a web browser. It is able to fill in forms and simulate mouse clicks in this browser. An excellent tutorial on Selenium, which I used a lot, can be found ",(0,o.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/controlling-the-web-with-python-6fceb22c5f08"},"here"),"."),(0,o.kt)("p",null,"With these kinds of things, I find that it's always good to write down a plan of action; whether that be on paper or on your computer, it's totally down to personal preference, I tend to go paper. More often than not I end up deviating substantially from the initial plan when things inevitably go wrong but either way, I find writing down initial ideas/thoughts provides clarity and gives me a sense of direction."),(0,o.kt)("p",null,"So here is a rough outline of how I chose to automate this task:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Make a call to the Strava API to get an ordered list of my recent run's unique IDs. This wasn't originally in the plan but obtaining my activities + the corresponding information in time order from Strava proved way harder than I initially thought due to added complications (for example, a lot of my runs group runs, and the html gets tricky here). Having these IDs made extracting the information was easier.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/src/strava_api.py"',title:'"/src/strava_api.py"'},'import pandas as pd\nimport requests\nimport json\n\nimport config\n\ndef get_strava_run_ids(id_num=10):\n    auth_url = "https://www.strava.com/oauth/token"\n    activites_url = "https://www.strava.com/api/v3/athlete/activities"\n    # my personal strava API information\n    payload = config.STRAVA_PAYLOAD\n    # check if there is a new request token\n    res = requests.post(auth_url, data=payload, verify=False)\n    access_token = res.json()["access_token"]\n\n    header = {"Authorization": "Bearer " + access_token}\n    param = {"per_page": id_num, "page": 1}\n    # make the request to the strava API\n    my_dataset = requests.get(activites_url, headers=header, params=param).json()\n\n    # store list of recent (ordered) IDs\n    id_list = []\n    for activity in my_dataset:\n        id_list.append(activity.get("id"))\n    return id_list\n\nif __name__ == "__main__":\n    # test\n    ids = get_strava_run_ids()\n    print(ids)\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use Selenium to log in to Strava, navigate to the \u2018Your Activities\u2019 tab, retrieve the information for runs corresponding to each unique activity ID. As you can see in the code below, Selenium couldn't be easier to use as it's so intuitive. The code below is a rough skeleton, the full code + comments can be found on my ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/jackmleitch/strava2ap"},"Github")," page.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/src/strava_selenium.py"',title:'"/src/strava_selenium.py"'},'from selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\n\nimport config\nfrom utils import remove_emoji\nfrom stravaAPI import get_strava_run_ids\n\n\ndef fetch_strava_activities(num_of_activities=6):\n    # website login details\n    strava_login = config.STRAVA_LOGIN\n    # use Chrome to access web (will update chrome driver if needed)\n    driver = webdriver.Chrome(ChromeDriverManager().install())\n    # open the website\n    driver.get("https://www.strava.com/login")\n\n    # add username and password and login\n    name_box = driver.find_element_by_name("email")\n    name_box.send_keys(strava_login.get("email"))\n    pass_box = driver.find_element_by_name("password")\n    pass_box.send_keys(strava_login.get("password"))\n    login_button = driver.find_element_by_id("login-button").click()\n\n    # filter the feed to only my activities\n    following_button = driver.find_element_by_id("feed-filter-btn").click()\n    your_activities = driver.find_element_by_xpath(\n        "//a[@href=\'/dashboard?feed_type=my_activity\']"\n    ).click()\n\n    # use strava API to get ids for latest runs\n    ids = get_strava_run_ids(num_of_activities)\n\n    # get i latest runs and run details\n    strava_activities = {}\n    for i, id in enumerate(ids):\n\n        # group runs and non-group runs have different css classes so we need to treat separately\n        try:\n            content = driver.find_element_by_xpath(\n                f\'//div[@id="Activity-{id}" and @class="activity feed-entry card"]\'\n            )\n            entry_body = content.find_element_by_class_name("entry-body")\n        except:\n            try:\n                content = driver.find_element_by_xpath(\n                        f\'//li[@id="Activity-{id}" and @class="activity child-entry"]\'\n                    )\n                entry_body = content.find_element_by_xpath(\'//div[@class="entry-body entry-inset"]\')\n            except:\n                print(f"No activity with id = {id} found")\n                continue\n\n        # get run title\n        title = entry_body.find_elements_by_css_selector("a")[0].text\n        # some runs have no description\n        if len(entry_body.find_elements_by_css_selector("a")) > 1:\n            description = entry_body.find_elements_by_css_selector("a")[1].text\n        else:\n            description = ""\n        # remove emojis from title and description as attackpoint cant deal with them\n        title = remove_emoji(title)\n        description = remove_emoji(description)\n        # get run distance, pace, and time\n        distance = entry_body.find_elements_by_css_selector("b")[0].text\n        pace = entry_body.find_elements_by_css_selector("b")[1].text\n        time = entry_body.find_elements_by_css_selector("b")[2].text\n\n        # store results in a dictionary\n        if title:\n           strava_activities[f"activity_{i}"] = {\n               "title": title,\n               "description": description,\n               "distance": distance,\n               "time": time,\n               "pace": pace,\n           }\n        # quit driver\n        driver.quit()\n        return strava_activities\n\n# check\nif __name__ == "__main__":\n    activities = fetch_strava_activities()\n    print(activities)\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now we have all my most recent activities (in order of completion!) along with the activities details: time, title, description, distance, and pace. All that is left to do now is add the title and descriptions to my Attackpoint page, although there are a few minor subtleties. First of all, if any activities have descriptions already I want to leave them alone. Secondly, if any of the Strava titles are the default i.e. haven't been changed, I also want to leave the post alone as I haven't gotten around to name the Strava run yet. As with before, some code details have been left out for clarity.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/src/attackpoint_selenium.py"',title:'"/src/attackpoint_selenium.py"'},'from selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\n\nimport config\nfrom utils import format_time, get_pace, get_dates\nfrom stravaSelenium import fetch_strava_activities\n\n\ndef attackpoint_login():\n    # similar to strava login\n    ...\n    return driver\n\ndef fetch_attackpoint_activities(days=3):\n    ...\n    return ap_activities\n\ndef update_description(days=2):\n    # fetch recent activities from strava\n    strava = fetch_strava_activities(num_of_activities=int(days * 4))\n    # fetch recent activities from attackpoint\n    attackpoint = fetch_attackpoint_activities(days=days)\n\n    # get a list of activity descriptions to post on attackpoint\n    descriptions = []\n    for i in range(0, min(len(strava), len(attackpoint))):\n        # get activity titles and descriptions from the strava data collected\n        activity_title = strava[f"activity_{i}"]["title"]\n        activity_description = strava[f"activity_{i}"]["description"]\n        ...\n        descriptions.append(activity_post)\n\n    # counters to keep track of things\n    counter_activities = -1\n    activities_edited = 0\n    # if these titles are on strava then dont update activity description on ap\n    strava_default_titles = ["Morning Run", ...]\n    # loop through days\n    for day in get_dates(days=days):\n        # go onto the days activity\n        try:\n            check_activity_date = driver.find_element_by_xpath(\n                f\'//a[@href="/viewlog.jsp/user_13190/period-1/enddate-{day}"]\'\n            ).click()\n        except:\n            continue\n        edit_button = driver.find_elements_by_xpath(\'//*[@title="Edit this entry"]\')\n        # loop over each activity on given day\n        for i, item in enumerate(edit_button):\n            edit_button = driver.find_elements_by_xpath(\'//*[@title="Edit this entry"]\')\n            # reverse edit_button to get activities in order\n            edit_button = edit_button[::-1]\n            edit_button[i].click()\n            distance = driver.find_element_by_id("distance").get_attribute("value")\n            # if not a run then ignore\n            if not distance:\n                driver.back()\n            else:\n                counter_activities += 1\n                description = driver.find_element_by_class_name(\n                    "logtextarea"\n                ).get_attribute("value")\n                # if no description then ignore\n                if description:\n                    driver.back()\n                # if there is no description then we can add one!\n                if not description:\n                    strava_title = strava[f"activity_{counter_activities}"]["title"]\n                    # if title is not on default strava titles\n                    if strava_title not in strava_default_titles:\n                        activities_edited += 1\n                        text_input = driver.find_element_by_class_name("logtextarea")\n                        text_input.send_keys(descriptions[counter_activities])\n                        submit = driver.find_element_by_xpath(\n                            "//input[@value=\'Submit\']"\n                        ).click()\n                    else:\n                        driver.back()\n        driver.get("https://www.attackpoint.org/log.jsp/user_13190")\n    driver.quit()\n    print(f"\\n{activities_edited} activity descriptions posted")\n\n\nif __name__ == "__main__":\n    update_description()\n')),(0,o.kt)("p",null,"And we are done, if I run ",(0,o.kt)("inlineCode",{parentName:"p"},"attackpointSelenium.py")," in the terminal it will add any missing descriptions to my Attackpoint!"),(0,o.kt)("h2",{id:"making-the-automatic-fully-automatic"},"Making The Automatic Fully Automatic"),(0,o.kt)("p",null,"Obviously running a line of code once or twice a day is WAY too much effort so the last thing that was left to do was deploy the code online somewhere so that I was completely out of the loop. Following this excellent ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/analytics-vidhya/schedule-a-python-script-on-heroku-a978b2f91ca8"},"tutorial")," I was able to deploy my code to ",(0,o.kt)("a",{parentName:"p",href:"https://id.heroku.com/login"},"Heroku")," and schedule it so that my code checks to see if my Attackpoint needs updating every 10 minutes! And best of all, it's completely free."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"TL;DR wrote code to automatically post information from one website onto the corresponding section of another."))),(0,o.kt)("p",null,"Code: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jackmleitch/strava2ap"},"https://github.com/jackmleitch/strava2ap")))}u.isMDXComponent=!0},8301:function(t,e,n){e.Z=n.p+"assets/images/AP-e4d27653785b8355d2382a0ed2e0d559.png"},9621:function(t,e,n){e.Z=n.p+"assets/images/strava-a5edfbd05db0d12c5d82f3ac99e70f84.png"}}]);