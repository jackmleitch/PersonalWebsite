"use strict";(self.webpackChunkjackmleitch_com_np=self.webpackChunkjackmleitch_com_np||[]).push([[8646],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4911:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={slug:"Project-Auto",title:"Automating the Setup of my Data Science Projects",tags:["Python","Automation","Github"],authors:"jack"},l=void 0,c={permalink:"/blog/Project-Auto",source:"@site/blog/2020-12-21-ProjectAuto.md",title:"Automating the Setup of my Data Science Projects",description:"Using Python to automate the process of setting up new project directories and making the first commit to a new repository in Github",date:"2020-12-21T00:00:00.000Z",formattedDate:"December 21, 2020",tags:[{label:"Python",permalink:"/blog/tags/python"},{label:"Automation",permalink:"/blog/tags/automation"},{label:"Github",permalink:"/blog/tags/github"}],readingTime:4.84,truncated:!0,authors:[{name:"Jack Leitch",title:"Machine Learning Engineer",url:"https://github.com/jackmleitch",imageURL:"https://github.com/jackmleitch.png",key:"jack"}],frontMatter:{slug:"Project-Auto",title:"Automating the Setup of my Data Science Projects",tags:["Python","Automation","Github"],authors:"jack"},prevItem:{title:"Automating Mundane Web-Based Tasks With Selenium and Heroku",permalink:"/blog/Strava-AP"},nextItem:{title:"Building a Recipe Recommendation API using Scikit-Learn, NLTK, Docker, Flask, and Heroku",permalink:"/blog/Recipe-Recommendation2"}},p={authorsImageUrls:[void 0]},u=[{value:"The Build",id:"the-build",level:2},{value:"Testing Everything Out",id:"testing-everything-out",level:2}],m={toc:u};function d(e){var t=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Using Python to automate the process of setting up new project directories and making the first commit to a new repository in Github")),(0,r.kt)("p",null,"I find myself doing the same thing over and over again when starting a new data science project. As well as it being extremely tedious (and frustrating when I can\u2019t remember how to use git\u2026), it's also just a waste of time. Inspired by the YouTuber ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/channel/UCWr0mx597DnSGLFk1WfvSkQ"},"Kalle Hallden"),", I decided to try and automate this process using Python."),(0,r.kt)("p",null,"As discussed in one of my previous blog posts, ",(0,r.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/organizing-machine-learning-projects-e4f86f9fdd9c"},"Organizing machine learning projects"),", whenever I start a new project I like to use the same file system. Putting everything into folders named src, input, models, notebooks, and notes make it super easy to find the files I'm looking for lending itself nicely to code reproducibility. An example file structure looks like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"alt",src:n(5434).Z,width:"1118",height:"568"})),(0,r.kt)("p",null,"The first thing I did was make a checklist of what I wanted my custom bash function to do:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a folder with the project name inside my Projects folder")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create folders inside this folder named: ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"input"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"models"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"notebooks"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"notes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use Github API to create a new repository with the project name")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add a ",(0,r.kt)("inlineCode",{parentName:"p"},"README.md"),", a ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore"),", and a ",(0,r.kt)("inlineCode",{parentName:"p"},"notes.txt"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Do the standard git stuff \u2014 ",(0,r.kt)("inlineCode",{parentName:"p"},"init"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"commit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"remote"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"push")))),(0,r.kt)("h2",{id:"the-build"},"The Build"),(0,r.kt)("p",null,"This turned out to be a relatively simple build and the only packages that I need to install were ",(0,r.kt)("strong",{parentName:"p"},"PyGithub")," to use the Github API, and ",(0,r.kt)("strong",{parentName:"p"},"python-dotenv")," to make use of environment variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"pip install PyGithub\npip install python-dotenv\n")),(0,r.kt)("p",null,"Inside a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file, I added the hardcoded stuff and my personal Github information. We can access our Github account using the API with our username and password but instead, I generated a personal token ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/settings/tokens"},"here"),". This is more secure and was actually easier to do."),(0,r.kt)("p",null,"I then wrote a function ",(0,r.kt)("inlineCode",{parentName:"p"},"create.py")," which creates the file system described above with the main directory being the project title. It also uses the Github API to create a repository on Github with the project name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="/src/create.py"',title:'"/src/create.py"'},"import sys\nimport os\nfrom dotenv import load_dotenv\nfrom github import Github\n\nload_dotenv()\n\n# Get data from a .env file thats in .gitignore\npath = os.getenv(\"FILEPATH\")\n# Access to token generated from github\ntoken = os.getenv(\"TOKEN\")\nsubFolders = ['input', 'src', 'models', 'notebooks', 'notes']\n\n\ndef create():\n    # Extract project name from the command line\n    folderName = str(sys.argv[1])\n    # Make directory in my files\n    os.makedirs(path+str(folderName))\n    # Adds in sub-directories of src, input, ...\n    for i in range(0, len(subFolders)):\n        subPath = str(path) + str(folderName) + '/' + str(subFolders[i])\n        os.makedirs(subPath)\n\n    # Uses Githubs API to create repository\n    user = Github(token).get_user()\n    repo = user.create_repo(folderName)\n    print(f\"Succesfully created repository {folderName}\")\n\nif __name__ == \"__main__\":\n    create()\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sys.argv")," is the list of command-line arguments passed to the Python program. So ",(0,r.kt)("inlineCode",{parentName:"p"},"sys.argv[1]")," gives us the project name if we, for example, write ",(0,r.kt)("inlineCode",{parentName:"p"},"python create.py ProjectName")," in the terminal."),(0,r.kt)("p",null,"I then use my personal Github token (stored in .env) to access my Github account and create a new repository named ProjectName (or whatever you write after you call ",(0,r.kt)("inlineCode",{parentName:"p"},"create.py"),")."),(0,r.kt)("p",null,"The next step was to write a shell script to call this function and then initialize the git repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="/src/.create.sh"',title:'"/src/.create.sh"'},"#!/bin/bash\n\n# . means to source the contents of this file into the current shell\n\nfunction create() {\n    cd '/Users/Jack/Documents/Projects/project_auto/'\n    source .env\n    # $1 is the first positional argument in the script\n    python create.py $1\n\n    # Add notes.txt file to notes folder\n    cd $FILEPATH$1/notes/\n    echo Notes > notes.txt\n\n    # The standard git stuff\n    cd $FILEPATH$1\n    echo 'notes/' >> .gitignore\n    echo '__pycache__/' >> .gitignore\n    touch README.md\n    git init -b main\n    git add .\n    git commit -m \"Project creation\"\n    git remote add origin https://github.com/$USERNAME/$1\n    git push -u origin main\n}\n")),(0,r.kt)("p",null,"This ",(0,r.kt)("strong",{parentName:"p"},"create")," function is the end product. It first sets the directory to the home of this project and calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"create.py")," function \u2014 the $1 here refers to the first argument after the terminal function. For example, if we run ",(0,r.kt)("inlineCode",{parentName:"p"},"create MNIST")," in the terminal, this function will subsequently run ",(0,r.kt)("inlineCode",{parentName:"p"},"create.py MNIST")," and create a project titled MNIST."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"notes.txt")," file is then added to the notes folder, this is then added, along with the pycache, to the ",(0,r.kt)("inlineCode",{parentName:"p"},".gitignore")," file. After this, a ",(0,r.kt)("inlineCode",{parentName:"p"},"README.md")," is created and the whole directory is then committed to our newly created repository. Finally, the remote is added to the directory and it is all pushed to Github."),(0,r.kt)("p",null,"The last piece of the puzzle was to add this ",(0,r.kt)("inlineCode",{parentName:"p"},".create.sh")," script to the ",(0,r.kt)("inlineCode",{parentName:"p"},"bash_profile"),", this is the initialization file for configuring the user environment. To put it simply, the create function will now be loaded into the terminals \u2018library\u2019. So whenever I now load up my terminal, I can easily just call on the create function. On macOS we can do this by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd\nnano .bash_profile\n")),(0,r.kt)("p",null,"This then opens up the ",(0,r.kt)("inlineCode",{parentName:"p"},"bash_profile"),". We can then add the following line of code to the profile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"source /PATH_TO_THE_FILE/.create.sh\n")),(0,r.kt)("p",null,"Lastly, to update the new changes we just run the same line again in the terminal."),(0,r.kt)("h2",{id:"testing-everything-out"},"Testing Everything Out"),(0,r.kt)("p",null,"Let\u2019s test our new found automatic abilities out! We can run the following in the terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"create PneumothoraxSegmentation\n")),(0,r.kt)("p",null,"In our projects folder, we can now see a new file!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"alt",src:n(2460).Z,width:"1100",height:"346"})),(0,r.kt)("p",null,"And on my Github page, I now have a new repository!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"alt",src:n(2928).Z,width:"1400",height:"623"})),(0,r.kt)("p",null,"Job done. This was a nice quick and easy automation that is going to make my life (and hopefully yours) a lot easier. With two simple scripts, we were able to fully automate the mundane tasks involved in creating a new data science project. I hope this post inspires you to start automating more of your data science workflow!"),(0,r.kt)("p",null,"Thanks for reading and I hope you enjoyed it."))}d.isMDXComponent=!0},2460:function(e,t,n){t.Z=n.p+"assets/images/files-9142a279f53ecc941e25cb9801c3b525.png"},5434:function(e,t,n){t.Z=n.p+"assets/images/folder-e77a5ce21bf5a21c9097363edb66c1d9.png"},2928:function(e,t,n){t.Z=n.p+"assets/images/github-7f8ed530b2393db3e15e498ddaec2ec2.png"}}]);